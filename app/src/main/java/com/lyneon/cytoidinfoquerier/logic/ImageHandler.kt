package com.lyneon.cytoidinfoquerier.logic

import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.LinearGradient
import android.graphics.Paint
import android.graphics.Rect
import android.graphics.Shader
import android.text.TextPaint
import androidx.compose.ui.graphics.toArgb
import androidx.core.content.res.ResourcesCompat
import androidx.core.graphics.drawable.toBitmap
import androidx.core.graphics.scale
import com.lyneon.cytoidinfoquerier.BaseApplication
import com.lyneon.cytoidinfoquerier.R
import com.lyneon.cytoidinfoquerier.data.constant.CytoidColors
import com.lyneon.cytoidinfoquerier.data.constant.CytoidScoreRange
import com.lyneon.cytoidinfoquerier.data.constant.toIntArray
import com.lyneon.cytoidinfoquerier.data.datasource.LocalDataSource
import com.lyneon.cytoidinfoquerier.data.enums.AvatarSize
import com.lyneon.cytoidinfoquerier.data.enums.BackgroundImageSize
import com.lyneon.cytoidinfoquerier.data.model.webapi.ProfileDetails
import com.lyneon.cytoidinfoquerier.ui.viewmodel.AnalyticsUIState
import com.lyneon.cytoidinfoquerier.util.ColumnBitmap
import com.lyneon.cytoidinfoquerier.util.DateParser
import com.lyneon.cytoidinfoquerier.util.DateParser.formatToTimeString
import com.lyneon.cytoidinfoquerier.util.RowBitmap
import com.lyneon.cytoidinfoquerier.util.extension.enableAntiAlias
import com.lyneon.cytoidinfoquerier.util.extension.isMaxCytoidGrade
import com.lyneon.cytoidinfoquerier.util.extension.roundBitmap
import com.lyneon.cytoidinfoquerier.util.extension.setPrecision
import com.lyneon.cytoidinfoquerier.util.extension.toBitmap
import com.patrykandpatrick.vico.core.extension.ceil
import com.patrykandpatrick.vico.core.extension.lineHeight
import com.patrykandpatrick.vico.core.extension.sumOf
import com.patrykandpatrick.vico.core.extension.textHeight
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.Job
import kotlinx.coroutines.asCoroutineDispatcher
import kotlinx.coroutines.async
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.FileInputStream
import java.net.URL
import java.util.Date
import java.util.Locale
import java.util.concurrent.CountDownLatch
import java.util.concurrent.Executors
import kotlin.math.abs
import kotlin.math.roundToInt

object AnalyticsImageHandler {
    val padding = 50
    val avatarDiameter =
        listOf(160f, 70f, 50f).sumOf { Paint().apply { textSize = it }.lineHeight }.ceil.toInt()
    val recordSpacing = 16
    val recordWidth = 576
    val recordHeight = 360
    val headerHeight = 300

    suspend fun getRecordsImage(
        profileDetails: ProfileDetails,
        records: List<com.lyneon.cytoidinfoquerier.data.model.graphql.type.UserRecord>,
        recordsType: AnalyticsUIState.QueryType,
        columnsCount: Int = 5,
        keep2DecimalPlaces: Boolean = true
    ): Bitmap {
//        行数
        val rowsCount =
            if (records.size % columnsCount == 0) records.size / columnsCount else records.size / columnsCount + 1
//        图片的总宽高
        val width = padding * 2 + recordWidth * columnsCount + recordSpacing * (columnsCount - 1)
        val height =
            padding * 2 + headerHeight + padding + recordHeight * rowsCount + recordSpacing * (rowsCount - 1) + 40
//        初始化位图和绘制对象
        val bitmap = ColumnBitmap(padding = padding).apply {
            setBackgroundColor(
                255,
                (CytoidColors.backgroundColor.red * 255).roundToInt(),
                (CytoidColors.backgroundColor.green * 255).roundToInt(),
                (CytoidColors.backgroundColor.blue * 255).roundToInt()
            )
            addBitmap(getHeaderImage(profileDetails, keep2DecimalPlaces, records, recordsType))
            addSpace(32)
            addBitmap(getRecordsGridImage(rowsCount, columnsCount, records, keep2DecimalPlaces))
            addSpace(32)
            addText(
                "${Date()} | Generated by ${BaseApplication.context.getString(R.string.app_name)}",
                getDefaultPaint().apply { textSize = 32f }
            )
        }

        return bitmap.getBitmap()
    }

    private suspend fun getHeaderImage(
        profileDetails: ProfileDetails,
        keep2DecimalPlaces: Boolean,
        records: List<com.lyneon.cytoidinfoquerier.data.model.graphql.type.UserRecord>,
        recordsType: AnalyticsUIState.QueryType
    ): Bitmap = RowBitmap(contentSpacing = this@AnalyticsImageHandler.padding).apply {
        val localAvatarFile = LocalDataSource.getAvatarBitmapFile(
            profileDetails.user.uid,
            AvatarSize.LARGE
        )
        val avatarBitmap = if (localAvatarFile.exists() && localAvatarFile.isFile) {
            FileInputStream(localAvatarFile).use {
                BitmapFactory.decodeStream(it)
            }
        } else {
            URL(profileDetails.user.avatar.large).toBitmap().also { _bitmap ->
                LocalDataSource.saveAvatarBitmap(
                    profileDetails.user.uid,
                    AvatarSize.LARGE,
                    _bitmap
                )
            }
        }.scale(avatarDiameter, avatarDiameter, false).roundBitmap()
        addBitmap(avatarBitmap)
        addBitmap(
            ColumnBitmap().apply {
                addText(profileDetails.user.uid, getDefaultPaint().apply {
                    textSize = 160f
                })
                addText("Lv.${profileDetails.exp.currentLevel}  Rating ${
                    profileDetails.rating.run { if (keep2DecimalPlaces) this.setPrecision(2) else this }
                }", getDefaultPaint().apply {
                    textSize = 70f
                })
                addText(
                    "${records.size} ${recordsType.displayName}",
                    getDefaultPaint().apply { textSize = 50f })
            }.getBitmap()
        )
    }.getBitmap()

    private fun getRecordsGridImage(
        rowsCount: Int,
        columnsCount: Int,
        records: List<com.lyneon.cytoidinfoquerier.data.model.graphql.type.UserRecord>,
        keep2DecimalPlaces: Boolean
    ): Bitmap {
        val bitmap = Bitmap.createBitmap(
            columnsCount * recordWidth + (columnsCount - 1) * recordSpacing,
            rowsCount * recordHeight + (rowsCount - 1) * recordSpacing,
            Bitmap.Config.ARGB_8888
        )
        val canvas = Canvas(bitmap).apply { enableAntiAlias() }
        val recordImages = getRecordImagesListFromRecordsList(records, keep2DecimalPlaces)

        var currentRecordImageIndex = 0
        canvas.drawBitmap(ColumnBitmap(contentSpacing = recordSpacing).apply {
            for (row in 1..rowsCount) {
                addBitmap(RowBitmap(contentSpacing = 16).apply {
                    for (column in 1..columnsCount) {
                        addBitmap(recordImages[currentRecordImageIndex])
                        currentRecordImageIndex++
                        if (currentRecordImageIndex == recordImages.size) break
                    }
                }.getBitmap())
            }
        }.getBitmap(), 0f, 0f, null)

        return bitmap
    }

    private fun getRecordImagesListFromRecordsList(
        records: List<com.lyneon.cytoidinfoquerier.data.model.graphql.type.UserRecord>,
        keep2DecimalPlaces: Boolean
    ): List<Bitmap> {
        val recordImages = ArrayList<Bitmap>(records.size)
        for (i in records.indices) {
//          初始化记录图像列表
            recordImages.add(Bitmap.createBitmap(1, 1, Bitmap.Config.RGB_565))
        }
        val countDownLatch = CountDownLatch(records.size)
        val dispatcher = Executors.newFixedThreadPool(32).asCoroutineDispatcher()
        val job = Job()
        for (i in records.indices) {
            val record = records[i]
            CoroutineScope(job + dispatcher).launch {
                val recordImage = async {
                    getRecordImage(record, keep2DecimalPlaces)
                }.await()
                synchronized(AnalyticsImageHandler::class.java) {
                    recordImages[i].recycle()
                    recordImages[i] = recordImage
                }
                countDownLatch.countDown()
            }
        }
        countDownLatch.await()
        job.cancel()
        dispatcher.close()

        return recordImages
    }

    private suspend fun getRecordImage(
        record: com.lyneon.cytoidinfoquerier.data.model.graphql.type.UserRecord,
        keep2DecimalPlaces: Boolean
    ): Bitmap {
        val bitmap = Bitmap.createBitmap(576, 360, Bitmap.Config.ARGB_8888)
        val canvas = Canvas(bitmap).apply { this.enableAntiAlias() }

        val contentPadding = 8
        val difficultySize = 24f
        val chartTitleSize = 48f
        val chartUIDSize = 16f
        val scoreSize = 36f
        val detailsSize = 24f

        return withContext(Dispatchers.IO) {
            //绘制曲绘
            val localBackgroundImageThumbnailFile = LocalDataSource.getBackgroundImageBitmapFile(
                record.chart?.level?.uid ?: "",
                BackgroundImageSize.THUMBNAIL
            )
            val backgroundImage =
                if (localBackgroundImageThumbnailFile.exists() && localBackgroundImageThumbnailFile.isFile) {
                    FileInputStream(localBackgroundImageThumbnailFile).use {
                        BitmapFactory.decodeStream(it)
                    }
                } else {
                    try {
                        if (record.chart?.level != null) {
                            URL(record.chart.level.bundle?.backgroundImage?.thumbnail).toBitmap()
                                .also { _bitmap ->
                                    LocalDataSource.saveBackgroundImageBitmap(
                                        record.chart.level.uid,
                                        BackgroundImageSize.THUMBNAIL,
                                        _bitmap
                                    )
                                }
                        } else BaseApplication.context.getDrawable(R.drawable.sayakacry)!!
                            .toBitmap()
                    } catch (e: Exception) {
                        BaseApplication.context.getDrawable(R.drawable.sayakacry)!!.toBitmap()
                    }
                }
            canvas.drawBitmap(
                backgroundImage,
                null,
                Rect(0, 0, 576, 360),
                null
            )
//        绘制半透明灰色遮罩层
            canvas.drawRect(0f, 0f, 576f, 360f, Paint().apply {
                color = Color.parseColor("#80000000")
                style = Paint.Style.FILL
            })

            canvas.drawBitmap(ColumnBitmap(padding = contentPadding).apply {
                record.chart?.let { chart ->
                    val difficulty = " ${
                        chart.difficultyName
                            ?: chart.difficultyType.replaceFirstChar {
                                if (it.isLowerCase()) it.titlecase(
                                    Locale.getDefault()
                                ) else it.toString()
                            }
                    } ${chart.difficultyLevel} "
                    val score = "${record.score} ${
                        (record.accuracy * 100).run { if (keep2DecimalPlaces) this.setPrecision(2) else this }
                    }%"
                    addBitmap(getDifficultyImage(difficulty, chart.difficultyType, difficultySize))
                    addText(
                        chart.level?.title ?: "ChartTitle",
                        getDefaultPaint().apply { textSize = chartTitleSize }
                    )
                    addText(
                        chart.level?.uid ?: "ChartUID",
                        getDefaultPaint().apply { textSize = chartUIDSize })
                    addText(score, getDefaultPaint().apply {
                        textSize = scoreSize
                        if (record.score in CytoidScoreRange.sss) shader =
                            if (record.score.isMaxCytoidGrade()) LinearGradient(
                                0f,
                                0f,
                                this.measureText(score),
                                this.textHeight,
                                CytoidColors.maxColor.toIntArray(),
                                null,
                                Shader.TileMode.CLAMP
                            ) else LinearGradient(
                                0f,
                                0f,
                                this.measureText(score),
                                this.textHeight,
                                CytoidColors.sssColor.toIntArray(),
                                null,
                                Shader.TileMode.CLAMP
                            )
                    }
                    )
                    addText(
                        "${record.details.maxCombo}x " +
                                "${
                                    when (chart.notesCount) {
                                        record.details.perfect -> "AP"
                                        record.details.maxCombo -> "FC"
                                        else -> ""
                                    }
                                } | " +
                                "Rating ${
                                    record.rating.run {
                                        if (keep2DecimalPlaces) this.setPrecision(
                                            2
                                        ) else this
                                    }
                                }",
                        getDefaultPaint().apply { textSize = detailsSize }
                    )
                    addBitmap(RowBitmap().apply {
                        addText("Details:", getDefaultPaint().apply { textSize = detailsSize })
                        addText(
                            record.details.perfect.toString() + " ",
                            getDefaultPaint().apply {
                                textSize = detailsSize
                                color = CytoidColors.perfectColor.toArgb()
                            }
                        )
                        addText(
                            record.details.great.toString() + " ",
                            getDefaultPaint().apply {
                                textSize = detailsSize
                                color = CytoidColors.greatColor.toArgb()
                            }
                        )
                        addText(
                            record.details.good.toString() + " ",
                            getDefaultPaint().apply {
                                textSize = detailsSize
                                color = CytoidColors.goodColor.toArgb()
                            }
                        )
                        addText(
                            record.details.bad.toString() + " ",
                            getDefaultPaint().apply {
                                textSize = detailsSize
                                color = CytoidColors.badColor.toArgb()
                            }
                        )
                        addText(
                            record.details.miss.toString() + " ",
                            getDefaultPaint().apply {
                                textSize = detailsSize
                                color = CytoidColors.missColor.toArgb()
                            }
                        )
                    }.getBitmap())
                    addText(
                        "Mods:${record.mods}",
                        getDefaultPaint().apply { textSize = detailsSize })
                    addText(
                        DateParser.parseISO8601Date(record.date).formatToTimeString(),
                        getDefaultPaint().apply { textSize = detailsSize }
                    )
                }
            }.getBitmap(), 0f, 0f, null)

            return@withContext bitmap
        }
    }

    private fun getDifficultyImage(
        difficultyText: String,
        difficultyType: String,
        difficultySize: Float
    ): Bitmap {
        val paint = getDefaultPaint().apply { textSize = difficultySize }
        val difficultyWidth = paint.measureText(difficultyText)
        val difficultyHeight = paint.textHeight
        val bitmap = Bitmap.createBitmap(
            difficultyWidth.ceil.toInt() + 10,
            difficultyHeight.ceil.toInt(),
            Bitmap.Config.ARGB_8888
        )
        val canvas = Canvas(bitmap).apply { enableAntiAlias() }

        canvas.drawRoundRect(
            0f,
            0f,
            bitmap.width.toFloat(),
            bitmap.height.toFloat(),
            bitmap.height.toFloat() / 2,
            bitmap.height.toFloat() / 2,
            Paint().apply {
                shader = LinearGradient(
                    0f, 0f, difficultyWidth, difficultyHeight, when (difficultyType) {
                        "easy" -> CytoidColors.easyColor.toIntArray()
                        "extreme" -> CytoidColors.extremeColor.toIntArray()
                        else -> CytoidColors.hardColor.toIntArray()
                    }, null, Shader.TileMode.CLAMP
                )
            }
        )
        canvas.drawText(difficultyText, 5f, abs(paint.ascent()), paint)

        return bitmap
    }

    private fun getDefaultPaint() = TextPaint().apply {
        typeface = ResourcesCompat.getFont(
            BaseApplication.context,
            R.font.mplus_rounded_regular
        )
        isAntiAlias = true
        color = Color.WHITE
    }
}